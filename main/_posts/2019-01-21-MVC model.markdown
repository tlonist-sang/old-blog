---
layout: post
title:  "MVC models"
date:   2019-01-23 12:00:00 +0900
comments: true
categories: Spring
---

In this posting, I will write about
1. MVC model 1 and MVC model 2

https://www.javatpoint.com/model-1-and-model-2-mvc-architecture
https://m.blog.naver.com/jhc9639/220967034588
https://nickjoit.tistory.com/9



1. MVC design patterns
	- I did not major in computer science in my university, so as a novice who was just 'thrown' into the sea of web development I was quite clueless, until I bumped into this MVC design pattern. In a way this rather simple model gave me a hang of how web servers generally work, and helped me understand the structrue of the web server and even where to look at when certain problems occur.

	- What does the MVC design pattern exist in the first place?
	
	: Design patterns have emerged from the necessity of solving repetitive and specific problems encountered in building softwares. This pattern, in particular, answers the question of 'How can a web application be divided to better cater for what it is designed to do'. 

	: It may not seem so necessary for small projects, but as projects get bigger and there are more requests from clients, there has to be an overarching solution that reduces dependencies among classes, considers future expansion, reusability of codes and etc.  
	
	: In short, this MVC pattern provides a guideline on how certain jobs should be assgined to certain modules; and let us talk more specific about it.

	1-1. MVC model 1 architecture
	![img]({{ "/assets/img/mvc1.png" | absolute_url }})
	JSP (Java Server Page) receives user's (browser's) request and handles them accordingly. 
	JSP page contains both business logic codes and HTML codes that shows the result of the process.

	Advantage
	: Easy and quick to develop web application

	Disadvantage
	: Navigation control is decentralized, meaning every page contains separate logics that determine the next. One change occured in a certain page may necessitate a series of changes in other pages.
	: Hard to extend. It is for small applications

	
	1-2. MVC model 2 architecture
	![img]({{ "/assets/img/mvc.png" | absolute_url }})
	MVC stands for Model, View, and Controller. Unlike MVC 1 model, there is a controller that receives the requests.

	[Model]
	: Model represents an application's information like variables, constants, initial values of all sorts and is responsible for their manipulation. It has following rules.
	<Model should have all data that user wants to use and edit>
	<Model should know nothing about view or controller>
	<When edited, a method informing its change should be implemented>

	[View]
	: View is literally a page clients view. It is responsible for input of data and objects, and also output of such inputs. It is a viewable page based on the passed on data.
	<View should not separately save information carried by models>
	<View should be unaware of other components like model or controller>
	<When edited, a method informing its change should be implemented>

	[Controller]
	: Controller handles data passed on from the model, manipulate or apply business logic to it, and pass it onto the view.
	In short, it connects view and model by processing data according to client's event request.
	<Controller should know about views and models>
	<Controller should watch over the changes made in views and models>
	

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
